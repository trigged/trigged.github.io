<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-15T14:55:26.742Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Go 的一些调试技巧</title>
    <link href="http://yoursite.com/2018/02/27/go-debug/"/>
    <id>http://yoursite.com/2018/02/27/go-debug/</id>
    <published>2018-02-27T09:59:38.000Z</published>
    <updated>2018-04-15T14:55:26.742Z</updated>
    
    <content type="html"><![CDATA[<p> 说起 Go 的优点，大家的第一反应基本都是并发，除此之外我觉得应该是 Go 的工具集，特别是 Go 的调试非常非常方便</p><h2 id="绕不过的-pprof"><a href="#绕不过的-pprof" class="headerlink" title="绕不过的 pprof"></a>绕不过的 pprof</h2><p> pprof 是内置调试工具之一可以非常方便的分析 CPU 和 内存的开销，找到热点函数，无论我们是通过 <code>import ”runtime/pprof&quot;</code> 还是 <code>&quot;net/http/pprof&quot;</code> 或者是 <code>go test -bench . -cpuprofile=cpu.prof</code> 来生成 prof 文件本质没有任何差别，最终调用的是同一段生成逻辑，这里我们需要关心的是生成出来的数据看什么</p><p>比如我们生成了一个 CPU profile 执行 <code>top10</code> 看到当前排名前十的热点函数开销，这么多数据我们究竟看什么？<br>建议优先看 <code>cum： 当前函数和其调用函数的开销</code> 然后在看 <code>flat： 当前函数开销</code><br>先看 cum 的原因在于 <code>flat</code> 高有可能是被调用了很多次，大部分都是系统函数，而 <code>cum</code> 我们可以看到一个整体，往往我们的问题代码都可以在这里看到，当然这并不是一个绝对</p><p> <img src="media/15199002816452.jpg" alt=""></p><p> pprof 还有很多其他有用的指令，比如 web 看到调用关系图，list 分析热点函数，更多的可以通过 help 来看</p><h2 id="trace-被忽视的主角"><a href="#trace-被忽视的主角" class="headerlink" title="trace 被忽视的主角"></a>trace 被忽视的主角</h2><p> 这是一个往往被大家忽视的工具，而且非常非常有用，集成也是非常简单这里以 web 为例<br> <code>curl host/debug/pprof/trace?seconds=10 &gt; trace.out</code> 这里我们生成 10s 内的数据，然后通过 <code>go tool trace trace.out</code> 如果数据量很大我们要等待一段时间，然后会在浏览器打开一个新的 tab 看起来非常的远古，但是里面的数据非常有用，特别是 view trace</p><p><img src="media/15199566649278.jpg" alt=""></p><p> 我们可以通过 view trace 了解到在此期间我们的程序跑的情况如何，我们随便先一个会进入下面这个界面，我们可以通过 wsad 当缩放，在这里我们可以看到 gc 的时间，STW 的影响，函数的调用栈，goroutine 的调度</p><p> <img src="media/15199011903121.jpg" alt=""></p><p>除此之外我们可以还可以通过<a href="https://github.com/divan/gotrace" target="_blank" rel="noopener">divan/gotrace</a> 把 goroutine 运行时的关系渲染出来<br><img src="media/15199565799062.jpg" alt=""></p><h2 id="持续的生态"><a href="#持续的生态" class="headerlink" title="持续的生态"></a>持续的生态</h2><p>go tool 已经十分完善了，我们可以通过 <code>objdump</code> 看到 asm , 也可以通过 <code>race</code>  来检测并发，生态也越发丰富，社区在不断共享更简单易用的调试工具。我们可以通过 <a href="https://github.com/google/pprof" target="_blank" rel="noopener">google/pprof</a> 或者 <a href="https://github.com/uber/go-torch" target="_blank" rel="noopener">uber/go-torch</a> 直接生成火焰图，这个简直比 Node 要方便太多<br>以 pprof 为例，我们只需一句即可即可生成强力的火焰图<br><code>pprof -http :3001 binary http://host/debug/pprof/profile</code></p><p><img src="media/15199017769737.jpg" alt=""></p><p>同时最近 google 又推出了一个 <a href="https://github.com/google/gops" target="_blank" rel="noopener">gops</a>, 让我们可以很快速的筛选出 go 程序不需要在通过 ps 来筛选，而且可以很方便的生成 trace </p><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>最后分享一些看到比较精彩的 Go Debug 案例，我们遇到类似的问题或许可以找到思路</p><p><a href="https://gocn.io/article/441" target="_blank" rel="noopener">如何定位 golang 进程 hang 死的 bug </a> （在 18年的 gopher conf 中有 arm 的大佬提到这个问题可能会在 2.0 中解决）</p><p><a href="https://gocn.io/article/340" target="_blank" rel="noopener">记一次Go websocket　项目内存泄露排查 + 使用Go pprof定位内存泄露 </a></p><h2 id="最最重要的"><a href="#最最重要的" class="headerlink" title="最最重要的"></a>最最重要的</h2><p>不要一开始过度优化这个是基本的共识，除此之外，一定要用最新的版本编译，已经有很多血淋淋的案例发生</p><p>除了上述工具外我们还可以的在 build 的时候我们可以加入一些 flag 可以看 GC, 逃逸分析，Goroutine 调度等相关选项，甚至通过 objdump 来看 asm</p><p>当 pprof 无效的时候，不要忘记我们还有 strace， perf， dtrace 可以用，这些都是无上的杀招</p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><p><a href="https://blog.golang.org/profiling-go-programs" target="_blank" rel="noopener">Profiling Go Programs - The Go Blog</a><br><a href="https://github.com/google/gops" target="_blank" rel="noopener">list and diagnose Go processes</a><br><a href="http://cizixs.com/2017/09/11/profiling-golang-program" target="_blank" rel="noopener">使用 pprof 和火焰图调试 golang 应用 – Cizixs Writes Here</a><br><a href="https://making.pusher.com/go-tool-trace/" target="_blank" rel="noopener">go tool trace - Making Pusher</a><br><a href="https://blog.gopheracademy.com/advent-2017/go-execution-tracer/" target="_blank" rel="noopener">go-execution-tracer</a><br><a href="https://golang.org/pkg/net/http/pprof/" target="_blank" rel="noopener">pprof - The Go Programming Language</a><br><a href="https://divan.github.io/posts/go_concurrency_visualize/" target="_blank" rel="noopener">Visualizing Concurrency in Go ·  divan’s blog</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 说起 Go 的优点，大家的第一反应基本都是并发，除此之外我觉得应该是 Go 的工具集，特别是 Go 的调试非常非常方便&lt;/p&gt;
&lt;h2 id=&quot;绕不过的-pprof&quot;&gt;&lt;a href=&quot;#绕不过的-pprof&quot; class=&quot;headerlink&quot; title=&quot;绕不过的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从 GitLab升级到 1.9 提升了30倍性能的思索</title>
    <link href="http://yoursite.com/2017/01/24/go-fork/"/>
    <id>http://yoursite.com/2017/01/24/go-fork/</id>
    <published>2017-01-24T09:40:27.000Z</published>
    <updated>2018-01-27T07:05:13.519Z</updated>
    
    <content type="html"><![CDATA[<p>最近无意看到 GitLab 博客的这篇文章，看完后大呼过瘾。大意是里面提到他们的线上服务在高峰时经常不能访问，然后经过各种辛苦的调试后，最终的解决办法是升级到 1.9 然后重新编译。最精彩的在于为什么升级到 1.9 就解决了？1.9 究竟做了什么会有如此巨大的提升</p><h3 id="在此之前我想先谈谈-fork-2"><a href="#在此之前我想先谈谈-fork-2" class="headerlink" title="在此之前我想先谈谈 fork(2)"></a>在此之前我想先谈谈 fork(2)</h3><p>  最早接触 <code>fork(2)</code> 是要写个Python 的 Daemon (守护进程)，当时是 Linux的小白（现在也是哈哈），网上随便一搜就完工了，但是最关键的一句牢牢记住了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">pid = os.fork()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>懵懵懂懂的记住了<code>fork(2)</code> 可以创造一个和当前<code>相同</code>的进程通过返回的 pid 来判断父子关系，这是我与 fork(2) 的初次相识。</p><p>在 Brendan Gregg 的著作里面学些到 <code>fork(2)</code> 可以用到  COW（copy-on-write）来提高性能。COW 简单的来说：当创建一个新进程时候不会马上为其分配内存，除非当它的读取到与父进程不同的内容或者做不同的任务时候才会重新分配内存。这样我们可以放心的来<code>fork(2)</code> 成千上万的进程而不必担心内存不够，是一个非常好的优化</p><p>除了 <code>fork(2)</code>  外<a href="http://man7.org/linux/man-pages/man2/clone.2.html" target="_blank" rel="noopener">clone(2) </a> 也可以通过设置 <code>child_stack = 0</code> 开启 COW 特性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">   Another difference for the raw clone() system </span><br><span class="line">call is that the child_stack argument may be </span><br><span class="line">zero, in which case the child uses a duplicate </span><br><span class="line">of the parent&apos;s stack.  (Copy-on-write semantics </span><br><span class="line">ensure that the child gets separate copies of </span><br><span class="line">stack pages when either process modifies the stack.)</span><br></pre></td></tr></table></figure><p>Go 在1.8  <a href="https://github.com/golang/go/blob/release-branch.go1.8/src/syscall/exec_linux.go#L102" target="_blank" rel="noopener">go/exec_linux.go</a>  中exec 也利用了此特性<br>  <code>SYS_CLONE, 0, uintptr(SIGCHLD)|sys.Cloneflags, 0, 0, 0, 0</code><br>在 NodeJS  <a href="https://github.com/nodejs/node/blob/e8a26e783e2e33514d44d8b2725d5f048e1314ce/lib/internal/cluster/master.js" target="_blank" rel="noopener">Cluster</a> 同样利用了此特性 来充分发挥多核的性能 <a href="https://github.com/nodejs/node-v0.x-archive/blob/ed0d1c384cd4578f7168633c838f1252bddb260e/lib/child_process.js#L1022" target="_blank" rel="noopener">child process</a> <a href="https://github.com/nodejs/node/blob/df63e534584a54dcf02b37446e1e821382e3cef3/src/process_wrap.cc#L46" target="_blank" rel="noopener">process_wrap.cc</a>。</p><h2 id="意外的陷阱"><a href="#意外的陷阱" class="headerlink" title="意外的陷阱"></a>意外的陷阱</h2><p>在 GitLab 的文章中，他们先后尝试了 <a href="https://gitlab.com/gitlab-org/gitaly/merge_requests/442" target="_blank" rel="noopener">pprof</a> 来观测 Go 程序，和 cAdvisor 来观测容器状态，都没有很好的收获，甚至后来 pprof 都不能用了，十分悲惨，最后通过 kill 来生成 thread dump 来发现大量调用阻塞在<a href="https://github.com/golang/go/blob/release-branch.go1.8/src/syscall/exec_unix.go#L185-L198" target="_blank" rel="noopener">ForkLock.Lock</a> 然后他们顺腾摸瓜发现最终的问题在前文说的 COW 上。<br>由于他们的住程序内存消耗很大，同时 <code>clone(2)</code> 出来的程序用来做 Git 相关的调用，完全没有享受到 COW 的收益 ，同时 COW 的维护是有成本的。雪上加霜的是一个 Go 的程序会占用大量的<a href="https://golang.org/doc/faq#Why_does_my_Go_process_use_so_much_virtual_memory" target="_blank" rel="noopener">虚拟内存</a>  在 <code>clone（2）</code> 下有可能复制父进程的一些信息但是有没有用到，造成大量的资源浪费和消耗。，大量的请求下可能出现系统认为没有可用内存，吞吐变慢，从而导致服务拒绝。</p><p>这个问题早在13年 就有同胞提出这个疑问<a href="https://github.com/golang/go/issues/5838" target="_blank" rel="noopener">syscall: use posix_spawn (or vfork) for ForkExec when possible · Issue #5838</a>，一直到 17 年才被<a href="https://go-review.googlesource.com/c/go/+/37439" target="_blank" rel="noopener">解决</a>，过程不在赘述，整个 diff 的代码量也不过百行，但是这个过程是非常值得学习和思考的。作者的核心思路是通过<code>CLONE_VM</code> 来复用父进程的内存，同时为了避免内存冲突，加上<code>CLONE_VM</code>来挂起父进程。</p><h2 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h2><ul><li>要多准备几手调试手段，在 Go 中 <code>pprof</code> 是很完美，但是挂了，我们还可以用 Core Dump, Dtrace 等来救场，不至于如此被动</li><li>这里并不是说<code>fork(2)</code>全无好处，只是不太适用 Exec 的场景，比如在 Node Cluster 这个特性可以提高大量的性能，对于开发者来说我们要充分的挖掘出这些特性找到最适合的场景</li><li>最最重要的是，一定要写事故总结，不然就看不到如此的好文了</li></ul><p><a href="https://en.wikipedia.org/wiki/Copy-on-write" target="_blank" rel="noopener">Copy-on-write - Wikipedia</a><br><a href="https://about.gitlab.com/2018/01/23/how-a-fix-in-go-19-sped-up-our-gitaly-service-by-30x/" target="_blank" rel="noopener">How a fix in Go 1.9 sped up our Gitaly service by 30x | GitLab</a><br><a href="https://go-review.googlesource.com/c/go/+/37439" target="_blank" rel="noopener">1.9 Diff</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近无意看到 GitLab 博客的这篇文章，看完后大呼过瘾。大意是里面提到他们的线上服务在高峰时经常不能访问，然后经过各种辛苦的调试后，最终的解决办法是升级到 1.9 然后重新编译。最精彩的在于为什么升级到 1.9 就解决了？1.9 究竟做了什么会有如此巨大的提升&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
</feed>
